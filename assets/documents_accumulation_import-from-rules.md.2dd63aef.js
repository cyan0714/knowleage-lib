import{_ as s,o as a,c as n,Q as p}from"./chunks/framework.8801f029.js";const l="/vitepress-blog/assets/3.d582125d.png",o="/vitepress-blog/assets/4.bf2296fb.png",e="/vitepress-blog/assets/5.81d6453e.png",t="/vitepress-blog/assets/6.90311f60.png",f=JSON.parse('{"title":"import from 加载规则","description":"","frontmatter":{},"headers":[],"relativePath":"documents/accumulation/import-from-rules.md","filePath":"documents/accumulation/import-from-rules.md","lastUpdated":1686552027000}'),c={name:"documents/accumulation/import-from-rules.md"},r=p(`<h1 id="import-from-加载规则" tabindex="-1">import from 加载规则 <a class="header-anchor" href="#import-from-加载规则" aria-label="Permalink to &quot;import from 加载规则&quot;">​</a></h1><p>疑问:</p><ul><li>import 某个文件时为什么有时后缀能省, 有时不能省?</li><li>为什么引入某个文件夹下的 index.js 或者 index.vue 时可以省略不写?</li><li>import from 的加载规则是什么样的?</li></ul><p>分析:</p><ul><li><p>Vue 使用 <strong>import</strong> ... <strong>from ...</strong> 来导入组件，库，变量等。如果路径是以 js，vue，json 结尾, 则可以省略。这里可以通过 webpack 来配置：</p><div class="language-jsx vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">exports</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  resolve: {</span></span>
<span class="line"><span style="color:#E1E4E8;">    extensions: [</span><span style="color:#9ECBFF;">&#39;.js&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;.vue&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;.json&#39;</span><span style="color:#E1E4E8;">],</span></span>
<span class="line"><span style="color:#E1E4E8;">    alias: {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#9ECBFF;">&#39;@&#39;</span><span style="color:#E1E4E8;">: </span><span style="color:#B392F0;">resolve</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;src&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#F97583;">...</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#005CC5;">module</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">exports</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  resolve: {</span></span>
<span class="line"><span style="color:#24292E;">    extensions: [</span><span style="color:#032F62;">&#39;.js&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;.vue&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;.json&#39;</span><span style="color:#24292E;">],</span></span>
<span class="line"><span style="color:#24292E;">    alias: {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#032F62;">&#39;@&#39;</span><span style="color:#24292E;">: </span><span style="color:#6F42C1;">resolve</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;src&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#D73A49;">...</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><div class="language-jsx vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> test </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;./test.vue&#39;</span><span style="color:#E1E4E8;"> 等同于 import test </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;./test&#39;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> test </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;./test.js&#39;</span><span style="color:#E1E4E8;"> 等同于 import test </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;./test&#39;</span></span>
<span class="line"><span style="color:#6A737D;">// 如果 test.vue，test.js 在同一个文件夹下，.js 比 .vue 的优先级高</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> test </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;./test.vue&#39;</span><span style="color:#24292E;"> 等同于 import test </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;./test&#39;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> test </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;./test.js&#39;</span><span style="color:#24292E;"> 等同于 import test </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;./test&#39;</span></span>
<span class="line"><span style="color:#6A737D;">// 如果 test.vue，test.js 在同一个文件夹下，.js 比 .vue 的优先级高</span></span></code></pre></div></li><li><p>如果 from 后的路径是一个文件夹或第三方包, 加载规则如下:</p><div class="language-jsx vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">if</span><span style="color:#E1E4E8;">(package.json 存在 </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> package.main 字段存在 </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> package.main 指定的 js 存在) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    取 package.main 指定的 js 作为 from 的来源，即使该 js 可能格式或内容错误</span></span>
<span class="line"><span style="color:#E1E4E8;">} </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;">(index.js 存在){</span></span>
<span class="line"><span style="color:#E1E4E8;">    取 index.js 作为 from 的来源</span></span>
<span class="line"><span style="color:#E1E4E8;">} </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    取 index.vue 作为 from 的来源</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">if</span><span style="color:#24292E;">(package.json 存在 </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> package.main 字段存在 </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> package.main 指定的 js 存在) {</span></span>
<span class="line"><span style="color:#24292E;">    取 package.main 指定的 js 作为 from 的来源，即使该 js 可能格式或内容错误</span></span>
<span class="line"><span style="color:#24292E;">} </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">if</span><span style="color:#24292E;">(index.js 存在){</span></span>
<span class="line"><span style="color:#24292E;">    取 index.js 作为 from 的来源</span></span>
<span class="line"><span style="color:#24292E;">} </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    取 index.vue 作为 from 的来源</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div></li><li><p>以 vue-element-admin 源码为例(<a href="https://github.com/PanJiaChen/vue-element-admin/blob/master/src/layout/index.vue" target="_blank" rel="noreferrer">https://github.com/PanJiaChen/vue-element-admin/blob/master/src/layout/index.vue</a>) <img src="`+l+'" alt="vue-element-admin"></p><ol><li>这里，from 的路径&#39;./components&#39;就是个文件夹。于是，按照前面的规则，首先查看文件夹下是否有 package.json： <img src="'+o+'" alt="vue-element-admin"></li><li>package.json 不存在，那么查找 index.js <img src="'+e+'" alt="vue-element-admin"></li><li>同一级目录下，存在 AppMain.vue 和 Navbar.vue，没有同名 js，所以加载的是 vue 文件</li><li>而 Settings 是一个文件夹，所以是加载的文件夹.打开 Settings 文件夹： <img src="'+t+'" alt="vue-element-admin"></li></ol><p>优先找 package.json。不存在。</p><p>然后找 index.js，不存在。</p><p>最后找 index.vue，存在。</p></li></ul>',5),i=[r];function E(y,m,d,u,g,v){return a(),n("div",null,i)}const h=s(c,[["render",E]]);export{f as __pageData,h as default};
