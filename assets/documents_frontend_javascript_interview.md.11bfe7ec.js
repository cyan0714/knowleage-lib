import{_ as i,o as l,c as e,Q as t}from"./chunks/framework.8801f029.js";const S=JSON.parse('{"title":"JS 面试题","description":"","frontmatter":{},"headers":[],"relativePath":"documents/frontend/javascript/interview.md","filePath":"documents/frontend/javascript/interview.md","lastUpdated":1708652843000}'),o={name:"documents/frontend/javascript/interview.md"},r=t('<h1 id="js-面试题" tabindex="-1">JS 面试题 <a class="header-anchor" href="#js-面试题" aria-label="Permalink to &quot;JS 面试题&quot;">​</a></h1><h2 id="_1-什么是跨域请求-你可以通过哪些方法解决跨域问题" tabindex="-1">1. 什么是跨域请求? 你可以通过哪些方法解决跨域问题? <a class="header-anchor" href="#_1-什么是跨域请求-你可以通过哪些方法解决跨域问题" aria-label="Permalink to &quot;1. 什么是跨域请求? 你可以通过哪些方法解决跨域问题?&quot;">​</a></h2><p>跨域请求是指在浏览器中，当一个网页尝试加载来自不同域名下的资源时会发生跨域请求。浏览器的同源策略会阻止跨域请求，以保护用户的安全。跨域请求可以通过以下几种方法解决：</p><ol><li>JSONP (JSON with Padding)：通过动态创建 <code>&lt;script&gt;</code> 标签来实现跨域请求，但只支持GET请求。</li><li>CORS (Cross-Origin Resource Sharing)：服务端设置响应头中的 Access-Control-Allow-Origin 字段来允许跨域请求。</li><li>代理服务器：在同源的服务器端发起请求，然后再将数据传递给客户端，绕过浏览器的同源策略。</li><li>WebSocket：通过WebSocket协议进行跨域通信。</li></ol><ul><li>在使用 vue 开发项目过程中, 可以在 <code>vue.config.js</code> 的 <code>devServer</code> 中配置 <code>proxy</code>, 此时的代理称为正向代理;</li><li>正式环境中可以在 nginx 中配置代理, 此时的代理称为反向代理(比如有一个前端服务, 跑在 5000 端口, 一个后端服务, 跑在 3000 端口, 此时前端请求后端服务会造成跨域, 为了解决这个问题, 可以在 nginx 中配置代理, 添加一个 8000 服务作为中转, 如果路径以 / 开头, 则代理到 5000 端口, 如果路径以 /api 开头, 则代理到 3000 端口. 此时浏览器的 network 中显示的 url 的端口为 8000, 但是实际请求的是 3000 端口, 这种客户端不知道服务端实际请求的是哪个地址就被称为&quot;反向代理&quot;)</li></ul><h2 id="_2-有哪些方法可以优化网站" tabindex="-1">2. 有哪些方法可以优化网站？ <a class="header-anchor" href="#_2-有哪些方法可以优化网站" aria-label="Permalink to &quot;2. 有哪些方法可以优化网站？&quot;">​</a></h2><ol><li><p><strong>压缩和合并资源</strong>：</p><ul><li>压缩CSS、JavaScript和图片等静态资源，减小文件大小。</li><li>合并多个CSS和JavaScript文件，减少HTTP请求次数。</li></ul></li><li><p><strong>使用CDN（内容分发网络）</strong>：</p><ul><li>将静态资源部署到CDN上，加速资源加载速度，减轻服务器负担。</li></ul></li><li><p><strong>延迟加载（Lazy Loading）</strong>：</p><ul><li>仅在用户需要时加载图片、视频或其他资源，减少首次加载时间。</li></ul></li><li><p><strong>优化图片</strong>：</p><ul><li>使用适当的图片格式（如WebP）和大小，以减少图片加载时间。</li><li>使用CSS sprites或SVG图像来减少HTTP请求。</li></ul></li><li><p><strong>减少重定向和请求次数</strong>：</p><ul><li>减少重定向，确保页面引用的资源有效且减少不必要的请求。</li></ul></li><li><p><strong>缓存优化</strong>：</p><ul><li>利用浏览器缓存机制，设置合适的缓存头，减少重复加载。</li><li>使用服务端缓存（如HTTP缓存、Redis缓存等）来提高性能。</li></ul></li><li><p><strong>异步加载脚本</strong>：</p><ul><li>使用 async 或 defer 属性加载JavaScript，避免阻塞页面渲染。</li></ul></li><li><p><strong>减少DOM操作</strong>：</p><ul><li>减少DOM操作次数，合并操作，减少重排和重绘。</li></ul></li></ol>',7),a=[r];function n(s,c,d,p,u,_){return l(),e("div",null,a)}const h=i(o,[["render",n]]);export{S as __pageData,h as default};
