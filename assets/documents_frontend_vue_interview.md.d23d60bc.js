import{_ as e,o as t,c as o,Q as r}from"./chunks/framework.8801f029.js";const f=JSON.parse('{"title":"Vue 面试题","description":"","frontmatter":{},"headers":[],"relativePath":"documents/frontend/vue/interview.md","filePath":"documents/frontend/vue/interview.md","lastUpdated":1708654373000}'),a={name:"documents/frontend/vue/interview.md"},n=r('<h1 id="vue-面试题" tabindex="-1">Vue 面试题 <a class="header-anchor" href="#vue-面试题" aria-label="Permalink to &quot;Vue 面试题&quot;">​</a></h1><h2 id="_1-在vue中使用v-for后为什么要加key" tabindex="-1">1. 在vue中使用v-for后为什么要加key <a class="header-anchor" href="#_1-在vue中使用v-for后为什么要加key" aria-label="Permalink to &quot;1. 在vue中使用v-for后为什么要加key&quot;">​</a></h2><ol><li><p><strong>性能优化</strong>：Vue使用 key 来追踪每个节点的身份，从而在更新DOM时更高效地识别节点。如果没有 key ，Vue会使用默认的算法进行比对，可能会导致不必要的重新渲染，影响性能。</p></li><li><p><strong>保持组件状态</strong>：在列表中添加 key 可以帮助Vue识别每个组件的唯一性，从而在列表变化时保持组件的状态，避免出现意外的行为。</p></li><li><p><strong>动画过渡</strong>：在进行列表项的动画过渡时，添加 key 可以让Vue正确地识别每个列表项的变化，从而实现流畅的过渡效果。</p></li><li><p><strong>避免重复渲染</strong>：当列表中的项发生变化时，使用 key 可以确保只有发生变化的项会被重新渲染，而不是整个列表。</p></li></ol>',3),i=[n];function s(_,l,u,d,c,p){return t(),o("div",null,i)}const h=e(a,[["render",s]]);export{f as __pageData,h as default};
